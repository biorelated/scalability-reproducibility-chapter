Nextflow [Ref] is a framework and an orchestration tool that enables scalable and reproducible scientific workflows using software containers. It is written in Groovy and provides a domain specific language (DSL) that simplifies writing and deploying complex workflows across different execution platforms in a portable manner.
A Nextflow pipeline is described as a series of processes, where each process can be written in any scripting language that can be executed by the Linux platform (BASH, Perl, Ruby, Python, etc).
A key component of Nextflow is the data flow programming model. In this model, based on a “push” concept, a process in the workflow will send its outputs over to the downstream processes that will wait for the data to arrive before starting their computation. The communication between processes is performed through channels, which define inputs and outputs for each process. Branches in the workflow are also entirely possible and can be defined using conditions that specify if a certain process must be executed or not depending on the input data or on user defined parameters.
The data flow paradigm is the closest representation of a pipeline idea where, after having opened the valve at the beginning, the flow progresses through the pipes. But Nextflow can handle this data flow in a parallel and asynchronous manner, so a process can operate on multiple inputs and emit multiple outputs at the same time. In a simple workflow where, for instance, there are 100 nucleotide sequences to be aligned with the NCBI NT database using BLAST, a first process can compute the alignment of the 100 sequences independently and in parallel, while a second process will wait to receive and collect each of the outputs from the 100 alignments to create a final results file. 
Nextflow supports multiple container technologies such as Docker and Singularity, and integrates natively with Git and popular code sharing platforms like GitHub. This makes it possible to precisely prototype self-contained computational workflows, tracking also all the modifications over time and ensuring the reproducibility of any former configuration. Nexflow guarantees also the workflows portability and consistency of results across different computing platforms by supporting several cluster schedulers (e.g. SLURM, PBS, LSF and SGE) and allowing direct execution on the Amazon cloud (AWS), using services like AWS Batch or automating the creation of a computing cluster in the cloud for the user.

In order to run the Nextflow example you need to have Java 8 (or 7) and a Docker engine (1.10 or higher) available on your computer, then to install Nextflow:

cd $HOME 
curl -s https://get.nextflow.io | bash

And then to run the example:

cd scalability-reproducibility-chapter/Nextflow
~/nextflow run workflow.nf -with-docker springer/scalability


